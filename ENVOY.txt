


# copy vscode settings
mkdir .vscode
cp $WORKDIR/c_cpp_properties.json $WORKDIR/launch.json .vscode/

# generate compile_commands.json
./tools/gen_compilation_database.py



# start new cluster
kind delete cluster --name contour
kind create cluster --config configs/kind-cluster-config.yaml --name contour



#############################################################################
#
# BUILDING
#

# Development builds

export WORKDIR=~/work/contour-devenv
cd ~/work/envoy

bazel build -c fastbuild //source/exe:envoy-static
bazel build -c fastbuild -s //source/exe:envoy-static    # use -s to see compile commands
bazel build -c fastbuild //source/restarter:restarter

# run directly on command line
bazel-bin/source/exe/envoy-static -c bootstrap-config.yaml --service-node mynode --service-cluster -mycluster --log-level info


# package as docker image
cp -af bazel-bin/source/exe/envoy-static $WORKDIR/docker/envoy/envoy
cp -af bazel-bin/source/restarter/restarter $WORKDIR/docker/envoy/restarter
docker build -f $WORKDIR/docker/envoy/Dockerfile $WORKDIR/docker/envoy -t envoy:latest
kind load docker-image envoy:latest --name contour  # upload image to kind cluster




# Debug builds

bazel build -c dbg //source/exe:envoy-static

gdb --args bazel-bin/source/exe/envoy-static -c bootstrap-config.yaml --service-node mynode --service-cluster -mycluster --log-level info            # run under debugger
gdbserver localhost:9999 bazel-bin/source/envoy-static -c bootstrap-config.yaml --service-node mynode --service-cluster -mycluster --log-level info  # debug remotely




# Release builds

# start bazel cache in one terminal and then build with --remote_http_cache
docker run -v $HOME/.cache/bazel-remote-cache:/data -p 28080:8080 buchgr/bazel-remote-cache

# build release
ci/run_envoy_docker.sh "BAZEL_BUILD_EXTRA_OPTIONS='--remote_http_cache=http://127.0.0.1:28080' ./ci/do_ci.sh bazel.release.server_only"  # without test
ci/run_envoy_docker.sh "BAZEL_BUILD_EXTRA_OPTIONS='--remote_http_cache=http://127.0.0.1:28080' ./ci/do_ci.sh bazel.release"              # with test

# create container
docker build -f ci/Dockerfile-envoy-image -t envoy .   # only ubuntu image
ci/docker_build.sh                                     # all images




#############################################################################
#
# Testing
#


# Build and load services for testing
docker pull tsaarni/httpbin:latest
kind load docker-image tsaarni/httpbin:latest --name contour

docker build -f docker/envoy-control-plane-stub/Dockerfile docker/envoy-control-plane-stub -t envoy-control-plane-stub:latest
kind load docker-image envoy-control-plane-stub --name contour






kubectl create configmap envoy-config --dry-run -o yaml --from-file=envoy.yaml=configs/envoy-xds-over-tls-path-source.yaml --from-file=configs/envoy-sds-auth-secret-tls-certicate.yaml --from-file=configs/envoy-sds-auth-secret-validation-context.yaml | kubectl apply -f -

kubectl create secret generic controlplane --dry-run -o yaml --from-file=certs/controlplane.pem --from-file=certs/controlplane-key.pem --from-file=certs/internal-root-ca.pem | kubectl apply -f -

kubectl create secret generic envoy --dry-run -o yaml --from-file=certs/envoy.pem --from-file=certs/envoy-key.pem --from-file=certs/internal-root-ca.pem | kubectl apply -f -

kubectl apply -f manifests/backend-httpbin-no-tls-no-ingress.yaml
kubectl apply -f manifests/deploy-envoy-xds-certificate-rotation.yaml




kubectl create configmap envoy-config --dry-run -o yaml --from-file=envoy.yaml=configs/envoy-xds-over-tls-path-source.yaml | kubectl apply -f -

http http://host1.127-0-0-101.nip.io/status/418
http --stream http://host1.127-0-0-101.nip.io/sse
