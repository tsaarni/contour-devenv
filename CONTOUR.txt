
export WORKDIR=~/work/contour-devenv

# start new cluster
kind delete cluster --name contour
kind create cluster --config configs/kind-cluster-config.yaml --name contour

# generate certificates
certyaml --destination certs configs/certs.yaml



##############################################################################
#
# BUILDING
#


go checkout go.mod go.sum     # needed to if getting error: "go: updates to go.mod needed, disabled by -mod=readonly"
make check

go build -o contour -v github.com/projectcontour/contour/cmd/contour  # compile binary

make container
docker tag projectcontour/contour:v1.3.0-31-ga06e386e projectcontour/contour:latest    # replace the tag with output from makefile
kind load docker-image projectcontour/contour:latest --name contour

# run tests only for a certain package
cd cmd/contour
go test .


go test -timeout 30s github.com/projectcontour/contour/cmd/contour -run "^(TestServeContextCertificateHandling)$" -v



# capture grpc traffic
sudo nsenter --target $(pidof contour) --net wireshark -f "port 8001" -k



# old versions
curl https://raw.githubusercontent.com/projectcontour/contour/release-1.0/examples/render/contour.yaml -o contour.yaml
curl https://raw.githubusercontent.com/projectcontour/contour/release-1.1/examples/render/contour.yaml -o contour.yaml
curl https://raw.githubusercontent.com/projectcontour/contour/release-1.7/examples/render/contour.yaml -o contour.yaml

# ...or change contour version to custom
sed -i 's!image: docker.io/projectcontour/contour.*!image: localhost/contour:latest!' contour.yaml
kubectl -n projectcontour scale deployment/contour --replicas=1



kubectl -n projectcontour logs $(kubectl -n projectcontour get pod -l app=contour -o jsonpath='{.items[0].metadata.name}') -f   # contour logs
kubectl -n projectcontour logs $(kubectl -n projectcontour get pod -l app=envoy -o jsonpath='{.items[0].metadata.name}') -f     # envoy logs


# contour debug api

Debug API https://projectcontour.io/docs/master/troubleshooting/
kubectl -n projectcontour port-forward pod/$(kubectl -n projectcontour get pod -l app=contour -o jsonpath='{.items[0].metadata.name}') 6060
http localhost:6060/debug/dag | dot -Tpng -o dag.png


#####################################################################################
#
# Envoy troubleshooting
#

# Admin interface operations
https://www.envoyproxy.io/docs/envoy/latest/operations/admin

# envoy config_dump

kubectl -n projectcontour port-forward $(kubectl -n projectcontour get pod -lapp=envoy -ojsonpath="{.items[0].metadata.name}") 9001
http http://localhost:9001/help
http http://localhost:9001/config_dump?include_eds | jq -C . | less
http http://localhost:9001/config_dump| jq '.configs[].dynamic_active_clusters'
http http://localhost:9001/config_dump| jq '.configs[].dynamic_route_configs'



#####################################################################################
#
# Run contour directly from source directory
#

kubectl apply -f https://projectcontour.io/quickstart/contour.yaml
kubectl apply -f examples/contour

# create endpoints that directs traffic to host, to execute controllers directly from source code without deploying
sed "s/REPLACE_ADDRESS_HERE/$(docker network inspect kind | jq -r '.[0].IPAM.Config[0].Gateway')/" manifests/contour-endpoints-dev.yaml | kubectl apply -f -

kubectl -n projectcontour scale deployment --replicas=0 contour
kubectl -n projectcontour rollout restart daemonset envoy
#kubectl apply -f manifests/backend-httpbin-with-tls.yaml
kubectl apply -f manifests/echoservers-tls.yaml



kubectl create secret generic httpbin --dry-run=client -o yaml --from-file=certs/httpbin.pem --from-file=certs/httpbin-key.pem | kubectl apply -f -
kubectl create secret tls echoserver-cert --cert=certs/echoserver.pem --key=certs/echoserver-key.pem --dry-run=client -o yaml | kubectl apply -f -
kubectl create secret generic internal-root-ca --from-file=ca.crt=certs/internal-root-ca.pem --dry-run=client -o yaml | kubectl apply -f -
kubectl create secret tls ingress --cert=certs/ingress.pem --key=certs/ingress-key.pem --dry-run=client -o yaml | kubectl apply -f -
kubectl create secret tls client --cert=certs/client-1.pem --key=certs/client-1-key.pem --dry-run=client -o yaml | kubectl apply -f -
kubectl create secret generic client-root-ca-1 --from-file=cacert.pem=certs/client-root-ca-1.pem --dry-run=client -o yaml | kubectl apply -f -
kubectl -n projectcontour create secret tls envoy-client-cert --cert=certs/envoy.pem --key=certs/envoy-key.pem --dry-run=client -o yaml | kubectl apply -f -
kubectl -n projectcontour create secret tls fallback-cert --cert=certs/fallback.pem --key=certs/fallback-key.pem --dry-run=client -o yaml | kubectl apply -f -


kubectl -n projectcontour get secret contourcert -o jsonpath='{..ca\.crt}' | base64 -d > ca.crt
kubectl -n projectcontour get secret contourcert -o jsonpath='{..tls\.crt}' | base64 -d > tls.crt
kubectl -n projectcontour get secret contourcert -o jsonpath='{..tls\.key}' | base64 -d > tls.key

go run github.com/projectcontour/contour/cmd/contour serve --xds-address=0.0.0.0 --xds-port=8001 --envoy-service-http-port=8080 --envoy-service-https-port=8443 --contour-cafile=ca.crt --contour-cert-file=tls.crt --contour-key-file=tls.key --config-path=$WORKDIR/configs/contour.yaml


http http://insecure.127-0-0-101.nip.io/foo
http --verify=certs/external-root-ca.pem https://protected.127-0-0-101.nip.io/foo

kubectl -n projectcontour get secret envoy-client-cert -o yaml | kubectl replace --force -f -


sudo nsenter --target $(pidof envoy) --net wireshark -f "port 443" -k
sudo nsenter --target $(pgrep hypercorn) --net wireshark -f "port 443" -k



#######

kubectl apply -f https://projectcontour.io/quickstart/contour.yaml
kubectl -n projectcontour get daemonsets.apps envoy -o yaml | sed "s/xds-address=contour/xds-address=$(docker network inspect kind | jq -r '.[0].IPAM.Config[0].Gateway')/" | kubectl apply -f -

kubectl -n projectcontour get secret contourcert -o jsonpath='{..ca\.crt}' | base64 -d > ca.crt
kubectl -n projectcontour get secret contourcert -o jsonpath='{..tls\.crt}' | base64 -d > tls.crt
kubectl -n projectcontour get secret contourcert -o jsonpath='{..tls\.key}' | base64 -d > tls.key
go run github.com/projectcontour/contour/cmd/contour serve --xds-address=0.0.0.0 --xds-port=8001 --envoy-service-http-port=80 --envoy-service-https-port=443 --contour-cafile=ca.crt --contour-cert-file=tls.crt --contour-key-file=tls.key

kubectl apply -f manifests/echoservers.yaml

http http://httpproxy.127-0-0-101.nip.io/
http http://httpproxy.127-0-0-101.nip.io/subpage
http http://httpproxy.127-0-0-101.nip.io/included/
http http://ingress.127-0-0-101.nip.io/
http http://ingress.127-0-0-101.nip.io/subpage


http http://httpproxy.127-0-0-101.nip.io/ | jq '.path, .pod' ; http http://httpproxy.127-0-0-101.nip.io/subpage | jq '.path, .pod' ; http http://httpproxy.127-0-0-101.nip.io/included/ | jq '.path, .pod'
